/**
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Playlist from '../model/Playlist';
import PlaylistList from '../model/PlaylistList';
import PlaylistProperties from '../model/PlaylistProperties';

/**
* Playlists service.
* @module api/PlaylistsApi
* @version 1.2.0
*/
export default class PlaylistsApi {

    /**
    * Constructs a new PlaylistsApi. 
    * @alias module:api/PlaylistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPlaylist operation.
     * @callback module:api/PlaylistsApi~addPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new playlist
     * Create a new playlist.
     * @param {module:model/PlaylistProperties} playlistProperties 
     * @param {module:api/PlaylistsApi~addPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    addPlaylist(playlistProperties, callback) {
      let postBody = playlistProperties;
      // verify the required parameter 'playlistProperties' is set
      if (playlistProperties === undefined || playlistProperties === null) {
        throw new Error("Missing the required parameter 'playlistProperties' when calling addPlaylist");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/playlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaylistById operation.
     * @callback module:api/PlaylistsApi~deletePlaylistByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a playlist
     * Delete a playlist.
     * @param {String} playlistId Id of the playlist
     * @param {module:api/PlaylistsApi~deletePlaylistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlaylistById(playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling deletePlaylistById");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlistId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylistById operation.
     * @callback module:api/PlaylistsApi~getPlaylistByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Playlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retun a single playlist
     * @param {String} playlistId Id of the playlist
     * @param {module:api/PlaylistsApi~getPlaylistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Playlist}
     */
    getPlaylistById(playlistId, callback) {
      let postBody = null;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylistById");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Playlist;
      return this.apiClient.callApi(
        '/playlists/{playlistId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaylists operation.
     * @callback module:api/PlaylistsApi~getPlaylistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List playlists
     * Return the list of playlist.  Return an empty list it there is no playlist to return.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of elements to return (default=10)
     * @param {Number} [offset] offset for pagination
     * @param {String} [search] Keywords search in all indexed fields
     * @param {String} [sort] Sorting results
     * @param {module:api/PlaylistsApi~getPlaylistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistList}
     */
    getPlaylists(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': opts['search'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaylistList;
      return this.apiClient.callApi(
        '/playlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlaylistById operation.
     * @callback module:api/PlaylistsApi~updatePlaylistByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing playlist
     * Update a existing playlist.
     * @param {String} playlistId Id of the playlist
     * @param {module:model/PlaylistProperties} playlistProperties 
     * @param {module:api/PlaylistsApi~updatePlaylistByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePlaylistById(playlistId, playlistProperties, callback) {
      let postBody = playlistProperties;
      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling updatePlaylistById");
      }
      // verify the required parameter 'playlistProperties' is set
      if (playlistProperties === undefined || playlistProperties === null) {
        throw new Error("Missing the required parameter 'playlistProperties' when calling updatePlaylistById");
      }

      let pathParams = {
        'playlistId': playlistId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/playlists/{playlistId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
