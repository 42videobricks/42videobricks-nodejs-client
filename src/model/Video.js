/**
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoAssets from './VideoAssets';
import VideoProperties from './VideoProperties';

/**
 * The Video model module.
 * @module model/Video
 * @version 1.1.2
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * Video Object
     * @alias module:model/Video
     * @implements module:model/VideoProperties
     * @param id {String} id of the video (null when adding a new video)
     */
    constructor(id) { 
        VideoProperties.initialize(this);
        Video.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();
            VideoProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('ctime')) {
                obj['ctime'] = ApiClient.convertToType(data['ctime'], 'Number');
            }
            if (data.hasOwnProperty('mtime')) {
                obj['mtime'] = ApiClient.convertToType(data['mtime'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = VideoAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('metas')) {
                obj['metas'] = ApiClient.convertToType(data['metas'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Video.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          VideoAssets.validateJSON(data['assets']);
        }

        return true;
    }


}

Video.RequiredProperties = ["id"];

/**
 * title of the video
 * @member {String} title
 */
Video.prototype['title'] = undefined;

/**
 * description of the video
 * @member {String} description
 */
Video.prototype['description'] = undefined;

/**
 * Define if the video is public (it can be accessible by anybody with the video url). Default = tue
 * @member {Boolean} public
 */
Video.prototype['public'] = undefined;

/**
 * tags list linked to video
 * @member {Array.<String>} tags
 */
Video.prototype['tags'] = undefined;

/**
 * id of the video (null when adding a new video)
 * @member {String} id
 */
Video.prototype['id'] = undefined;

/**
 * Status of the video : * 'REQUESTED': video as been submited, waiting for its creation * 'CREATED': video has been created and file can be uploaded          * 'TRANSCODING': video is unvailable because still in the creation  & in encoding process * 'AVAILABLE': video is ready to be stream
 * @member {module:model/Video.StatusEnum} status
 */
Video.prototype['status'] = undefined;

/**
 * video duration in second
 * @member {Number} duration
 */
Video.prototype['duration'] = undefined;

/**
 * Creation date (timestamp)
 * @member {Number} ctime
 */
Video.prototype['ctime'] = undefined;

/**
 * Modification date (timestamp)
 * @member {Number} mtime
 */
Video.prototype['mtime'] = undefined;

/**
 * @member {module:model/VideoAssets} assets
 */
Video.prototype['assets'] = undefined;

/**
 * metas data  free-form object: refere to the documentation
 * @member {Object.<String, Object>} metas
 */
Video.prototype['metas'] = undefined;


// Implement VideoProperties interface:
/**
 * title of the video
 * @member {String} title
 */
VideoProperties.prototype['title'] = undefined;
/**
 * description of the video
 * @member {String} description
 */
VideoProperties.prototype['description'] = undefined;
/**
 * Define if the video is public (it can be accessible by anybody with the video url). Default = tue
 * @member {Boolean} public
 */
VideoProperties.prototype['public'] = undefined;
/**
 * tags list linked to video
 * @member {Array.<String>} tags
 */
VideoProperties.prototype['tags'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Video['StatusEnum'] = {

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "TRANSCODING"
     * @const
     */
    "TRANSCODING": "TRANSCODING",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE"
};



export default Video;

