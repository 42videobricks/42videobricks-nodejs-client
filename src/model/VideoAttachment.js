/**
 * 42videobricks
 * 42videobricks is a Video Platform As A Service (VPaaS)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VideoAttachment model module.
 * @module model/VideoAttachment
 * @version 1.1
 */
class VideoAttachment {
    /**
     * Constructs a new <code>VideoAttachment</code>.
     * Video Attachment Object
     * @alias module:model/VideoAttachment
     * @param videoId {String} id of the video
     */
    constructor(videoId) { 
        
        VideoAttachment.initialize(this, videoId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, videoId) { 
        obj['videoId'] = videoId;
    }

    /**
     * Constructs a <code>VideoAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoAttachment} obj Optional instance to populate.
     * @return {module:model/VideoAttachment} The populated <code>VideoAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoAttachment();

            if (data.hasOwnProperty('videoId')) {
                obj['videoId'] = ApiClient.convertToType(data['videoId'], 'String');
            }
            if (data.hasOwnProperty('attachmentType')) {
                obj['attachmentType'] = ApiClient.convertToType(data['attachmentType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoAttachment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoAttachment.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['videoId'] && !(typeof data['videoId'] === 'string' || data['videoId'] instanceof String)) {
            throw new Error("Expected the field `videoId` to be a primitive type in the JSON string but got " + data['videoId']);
        }
        // ensure the json data is a string
        if (data['attachmentType'] && !(typeof data['attachmentType'] === 'string' || data['attachmentType'] instanceof String)) {
            throw new Error("Expected the field `attachmentType` to be a primitive type in the JSON string but got " + data['attachmentType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }

        return true;
    }


}

VideoAttachment.RequiredProperties = ["videoId"];

/**
 * id of the video
 * @member {String} videoId
 */
VideoAttachment.prototype['videoId'] = undefined;

/**
 * Attachment type
 * @member {module:model/VideoAttachment.AttachmentTypeEnum} attachmentType
 * @default 'caption'
 */
VideoAttachment.prototype['attachmentType'] = 'caption';

/**
 * the name of file
 * @member {String} name
 */
VideoAttachment.prototype['name'] = undefined;

/**
 * the path of the content
 * @member {String} url
 */
VideoAttachment.prototype['url'] = undefined;

/**
 * the local of attachment
 * @member {String} locale
 */
VideoAttachment.prototype['locale'] = undefined;





/**
 * Allowed values for the <code>attachmentType</code> property.
 * @enum {String}
 * @readonly
 */
VideoAttachment['AttachmentTypeEnum'] = {

    /**
     * value: "caption"
     * @const
     */
    "caption": "caption",

    /**
     * value: "subtitle"
     * @const
     */
    "subtitle": "subtitle"
};



export default VideoAttachment;

